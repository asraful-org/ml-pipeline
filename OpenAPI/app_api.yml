openapi: 3.0.3
info:
  title: ML Model Inference API
  description: API for machine learning model inference with Iris Logistic Regression model
  version: 1.0.0
  contact:
    name: ML API Support
servers:
  - url: http://localhost:5001
    description: Local development server
  - url: https://your-domain.com
    description: Production server
paths:
  /:
    get:
      summary: Get API information and available endpoints
      description: Returns basic information about the API, available endpoints, and model status
      responses:
        '200':
          description: API information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "ML Model Inference API"
                  endpoints:
                    type: object
                    properties:
                      "/predict":
                        type: string
                        example: "POST - Make predictions"
                      "/health":
                        type: string
                        example: "GET - Health check"
                      "/model-info":
                        type: string
                        example: "GET - Model information"
                  model_status:
                    type: string
                    enum: [loaded, not_loaded]
                    example: "loaded"

  /health:
    get:
      summary: Health check endpoint
      description: Check the health status of the API and model loading status
      responses:
        '200':
          description: Service is healthy and model is loaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [healthy, unhealthy]
                    example: "healthy"
                  model_loaded:
                    type: boolean
                    example: true
                  service:
                    type: string
                    example: "ML Inference API"
                  model_info:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "IrisLogisticRegressionModel"
                      version:
                        type: string
                        example: "local_bundled"
                      source:
                        type: string
                        example: "Local/Bundled model.pkl"
        '503':
          description: Service is unhealthy or model is not loaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "unhealthy"
                  model_loaded:
                    type: boolean
                    example: false
                  service:
                    type: string
                    example: "ML Inference API"

  /model-info:
    get:
      summary: Get detailed model information
      description: Returns detailed information about the loaded model including features and classes
      responses:
        '200':
          description: Model information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: "IrisLogisticRegressionModel"
                  version:
                    type: string
                    example: "local_bundled"
                  source:
                    type: string
                    example: "Local/Bundled model.pkl"
                  type:
                    type: string
                    example: "LogisticRegression"
                  expected_features:
                    type: integer
                    example: 4
                    description: Number of input features expected by the model
                  classes:
                    type: array
                    items:
                      oneOf:
                        - type: integer
                        - type: string
                    example: [0, 1, 2]
                    description: Classes that the model can predict
        '503':
          description: Model not loaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /predict:
    post:
      summary: Make predictions using the loaded model
      description: Submit feature vectors to get predictions from the ML model
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
              properties:
                data:
                  type: array
                  items:
                    type: array
                    items:
                      type: number
                  example: [[5.1, 3.5, 1.4, 0.2], [6.2, 3.4, 5.4, 2.3]]
                  description: Array of feature vectors for prediction
            examples:
              iris_samples:
                summary: Iris flower measurements
                description: Example with two iris flower samples
                value:
                  data: [[5.1, 3.5, 1.4, 0.2], [6.2, 3.4, 5.4, 2.3]]
              single_sample:
                summary: Single iris sample
                description: Example with a single iris flower sample
                value:
                  data: [[5.0, 3.6, 1.4, 0.2]]
      responses:
        '200':
          description: Predictions generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  predictions:
                    type: array
                    items:
                      oneOf:
                        - type: integer
                        - type: number
                    example: [0, 2]
                    description: Model predictions for each input sample
                  probabilities:
                    type: array
                    items:
                      type: array
                      items:
                        type: number
                    example: [[0.95, 0.03, 0.02], [0.01, 0.15, 0.84]]
                    description: Prediction probabilities for each class (if available)
        '400':
          description: Bad request - invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                missing_content_type:
                  summary: Missing JSON content type
                  value:
                    error: "Content-Type must be application/json"
                missing_data:
                  summary: Missing data key
                  value:
                    error: "Missing \"data\" key in JSON payload"
                invalid_features:
                  summary: Invalid feature format
                  value:
                    error: "Expected 4 features, got 3"
                non_numeric:
                  summary: Non-numeric values
                  value:
                    error: "Feature vector at index 0 contains non-numeric values"
        '500':
          description: Internal server error during prediction
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '503':
          description: Model not loaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Model not loaded. Server might be misconfigured or model.pkl is missing/corrupt."

components:
  schemas:
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          description: Error message describing what went wrong
          example: "Model not loaded"

    PredictionRequest:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            type: array
            items:
              type: number
          description: Array of feature vectors where each vector contains numerical features
          example: [[5.1, 3.5, 1.4, 0.2], [6.2, 3.4, 5.4, 2.3]]

    PredictionResponse:
      type: object
      properties:
        predictions:
          type: array
          items:
            oneOf:
              - type: integer
              - type: number
          description: Array of predictions corresponding to each input feature vector
        probabilities:
          type: array
          items:
            type: array
            items:
              type: number
              minimum: 0
              maximum: 1
          description: Optional array of probability distributions for each prediction

  responses:
    ModelNotLoaded:
      description: Model is not loaded or unavailable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    BadRequest:
      description: Invalid request format or data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Endpoint not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Endpoint not found"
              available_endpoints:
                type: array
                items:
                  type: string
                example: ["/", "/predict", "/health", "/model-info"]

    MethodNotAllowed:
      description: HTTP method not allowed for this endpoint
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Method not allowed for this endpoint"

tags:
  - name: Health
    description: Health check and status endpoints
  - name: Model
    description: Model information and inference endpoints
  - name: Info
    description: API information endpoints