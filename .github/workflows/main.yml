name: ML Model Training and Tracking to Azure ML

on:
  push:
    branches:
      - main
  # You might also want to trigger on pull requests for linting/testing
  # pull_request:
  #   branches:
  #     - main

jobs:
  train-model:
    runs-on: ubuntu-latest # Using a standard Ubuntu runner provided by GitHub

    # Permissions are crucial for OIDC authentication with Azure
    permissions:
      id-token: write # Required to fetch OIDC ID token for Azure login
      contents: read  # Required to checkout the repository code

    # Define environment variables that will be available to all steps in this job.
    # These values are pulled from your GitHub Secrets for security.
    env:
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_RESOURCE_GROUP_NAME: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
      AZURE_ML_WORKSPACE_NAME: ${{ secrets.AZURE_ML_WORKSPACE_NAME }}
      # No need to explicitly set MLFLOW_TRACKING_URI here anymore, as train.py
      # will dynamically retrieve it via the Azure ML SDK.

    steps:
      - name: Checkout code
        # Action to checkout your repository code into the runner's workspace
        uses: actions/checkout@v4

      - name: Azure Login (for DefaultAzureCredential)
        # This action authenticates your GitHub Actions runner to Azure using OIDC.
        # It sets up credentials that DefaultAzureCredential in your Python script can use.
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}      # Your Azure AD Application (client) ID
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}      # Your Azure AD Directory (tenant) ID
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }} # Your Azure Subscription ID

      - name: Set up Python environment
        # Action to set up a specific Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Ensure this matches your development environment

      - name: Install dependencies
        # Install required Python packages from requirements.txt
        run: |
          echo "Upgrading pip..."
          python -m pip install --upgrade pip
          echo "Installing dependencies from requirements.txt..."
          pip install -r requirements.txt
          echo "Dependencies installed."

      - name: Run ML training and log with MLflow
        # Execute your main training script.
        # The script will use the environment variables (set in the 'env' block)
        # and the Azure login from the previous step to connect to Azure ML
        # and log MLflow runs to your workspace.
        run: |
          echo "Starting ML training script..."
          python src/train.py
          echo "ML training script finished."

      - name: Upload model.pkl as GitHub Actions artifact (optional)
        # This step uploads the locally generated model.pkl file as an artifact
        # attached to this GitHub Actions run. This is for easy access directly
        # from the GitHub UI, separate from MLflow's artifact store in Azure.
        uses: actions/upload-artifact@v4
        with:
          name: trained-model-pkl
          path: model.pkl # Path to the model.pkl file created by train.py
          retention-days: 7 # How long to keep the artifact (e.g., 7 days)
        if: success() # Only upload if the previous steps succeeded